from mock import MagicMock

from sonic_platform_base.sonic_xcvr.api.public.cmis import CmisApi
from sonic_platform_base.sonic_xcvr.mem_maps.public.cmis import CmisMemMap
from sonic_platform_base.sonic_xcvr.xcvr_eeprom import XcvrEeprom
from sonic_platform_base.sonic_xcvr.codes.public.cmis import CmisCodes
from sonic_platform_base.sonic_xcvr.fields.consts import LENGTH_ASSEMBLY_FIELD, LEN_MULT_FIELD

class TestCmis(object):
    codes = CmisCodes
    mem_map = CmisMemMap(codes)
    reader = MagicMock(return_value=None)
    writer = MagicMock()
    eeprom = XcvrEeprom(reader, writer, mem_map)
    api = CmisApi(eeprom)

    def test_api(self):
        """
        Verify all api access valid fields
        """
        self.api.get_model()
        self.api.get_vendor_rev()
        self.api.get_vendor_serial()
        self.api.get_module_type()
        self.api.get_connector_type()
        self.api.get_module_hardware_revision()
        self.api.get_cmis_rev()
        self.api.get_module_state()
        self.api.get_module_fault_cause()
        self.api.get_module_active_firmware()
        self.api.get_module_inactive_firmware()
        self.api.get_transceiver_info()
        self.api.get_transceiver_bulk_status()
        self.api.get_transceiver_threshold_info()
        self.api.get_module_temperature()
        self.api.get_voltage()
        self.api.is_flat_memory()
        self.api.get_temperature_support()
        self.api.get_voltage_support()
        self.api.get_rx_los()
        self.api.get_rx_los_support()
        self.api.get_tx_cdr_lol()
        self.api.get_tx_cdr_lol_support()
        self.api.get_rx_cdr_lol()
        self.api.get_rx_cdr_lol_support()
        self.api.get_tx_power_flag()
        self.api.get_tx_bias_flag()
        self.api.get_rx_power_flag()
        self.api.get_tx_output_status()
        self.api.get_rx_output_status()
        self.api.get_tx_bias()
        self.api.get_tx_bias_support()
        self.api.get_tx_power()
        self.api.get_tx_power_support()
        self.api.get_rx_power()
        self.api.get_rx_power_support()
        self.api.get_tx_fault()
        self.api.get_tx_fault_support()
        self.api.get_tx_los()
        self.api.get_tx_los_support()
        self.api.get_tx_disable_support()
        self.api.get_tx_disable()
        self.api.get_tx_disable_channel()
        self.api.tx_disable(True)
        self.api.tx_disable_channel(0x5, True)
        self.api.get_transceiver_thresholds_support()
        self.api.get_lpmode_support()
        self.api.get_power_override_support()
        self.api.get_module_media_type()
        self.api.get_host_electrical_interface()
        self.api.get_module_media_interface()
        self.api.is_coherent_module()
        self.api.get_host_lane_count()
        self.api.get_media_lane_count()
        self.api.get_media_interface_technology()
        self.api.get_host_lane_assignment_option()
        self.api.get_media_lane_assignment_option()
        self.api.get_active_apsel_hostlane()
        self.api.get_tx_config_power()
        self.api.get_media_output_loopback()
        self.api.get_media_input_loopback()
        self.api.get_host_output_loopback()
        self.api.get_host_input_loopback()
        self.api.get_aux_mon_type()
        self.api.get_laser_temperature()
        self.api.get_laser_TEC_current()
        self.api.get_config_datapath_hostlane_status()
        self.api.get_datapath_state()
        self.api.get_dpinit_pending()
        self.api.get_supported_power_config()
        self.api.reset_module(True)
        self.api.set_low_power(True)
        self.api.get_loopback_capability()
        self.api.set_loopback_mode('none')
        self.api.set_loopback_mode('host-side-input')
        self.api.set_loopback_mode('host-side-output')
        self.api.set_loopback_mode('media-side-input')
        self.api.set_loopback_mode('media-side-output')
        self.api.get_cdb_api()
        self.api.get_vdm_api()
        self.api.get_vdm()
        self.api.get_module_firmware_fault_state_changed()
        self.api.get_module_level_flag()
        self.api.get_module_fw_upgrade_feature()
        # self.api.get_module_fw_info()
        # self.api.module_fw_run()
        # self.api.module_fw_commit()
        # self.api.module_fw_download(10, 2048, False, True, 2048, 'a.bin')
        # self.api.get_transceiver_status()
        # self.api.get_transceiver_loopback()

    def test_cable_len(self):
        cable_len_field = self.mem_map.get_field(LENGTH_ASSEMBLY_FIELD)
        data = bytearray([0xFF])
        dep = {LEN_MULT_FIELD: 0b11}
        decoded = cable_len_field.decode(data, **dep)

        assert decoded == 6300
